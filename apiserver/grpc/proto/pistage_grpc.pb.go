// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PistageClient is the client API for Pistage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PistageClient interface {
	ApplyOneway(ctx context.Context, in *ApplyPistageRequest, opts ...grpc.CallOption) (*ApplyPistageOnewayReply, error)
	ApplyStream(ctx context.Context, in *ApplyPistageRequest, opts ...grpc.CallOption) (Pistage_ApplyStreamClient, error)
	RollbackOneway(ctx context.Context, in *ApplyPistageRequest, opts ...grpc.CallOption) (*ApplyRollbackReply, error)
	RollbackStream(ctx context.Context, in *ApplyPistageRequest, opts ...grpc.CallOption) (Pistage_RollbackStreamClient, error)
}

type pistageClient struct {
	cc grpc.ClientConnInterface
}

func NewPistageClient(cc grpc.ClientConnInterface) PistageClient {
	return &pistageClient{cc}
}

func (c *pistageClient) ApplyOneway(ctx context.Context, in *ApplyPistageRequest, opts ...grpc.CallOption) (*ApplyPistageOnewayReply, error) {
	out := new(ApplyPistageOnewayReply)
	err := c.cc.Invoke(ctx, "/proto.Pistage/ApplyOneway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pistageClient) ApplyStream(ctx context.Context, in *ApplyPistageRequest, opts ...grpc.CallOption) (Pistage_ApplyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pistage_ServiceDesc.Streams[0], "/proto.Pistage/ApplyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pistageApplyStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pistage_ApplyStreamClient interface {
	Recv() (*ApplyPistageStreamReply, error)
	grpc.ClientStream
}

type pistageApplyStreamClient struct {
	grpc.ClientStream
}

func (x *pistageApplyStreamClient) Recv() (*ApplyPistageStreamReply, error) {
	m := new(ApplyPistageStreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pistageClient) RollbackOneway(ctx context.Context, in *ApplyPistageRequest, opts ...grpc.CallOption) (*ApplyRollbackReply, error) {
	out := new(ApplyRollbackReply)
	err := c.cc.Invoke(ctx, "/proto.Pistage/RollbackOneway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pistageClient) RollbackStream(ctx context.Context, in *ApplyPistageRequest, opts ...grpc.CallOption) (Pistage_RollbackStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pistage_ServiceDesc.Streams[1], "/proto.Pistage/RollbackStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pistageRollbackStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pistage_RollbackStreamClient interface {
	Recv() (*ApplyPistageStreamReply, error)
	grpc.ClientStream
}

type pistageRollbackStreamClient struct {
	grpc.ClientStream
}

func (x *pistageRollbackStreamClient) Recv() (*ApplyPistageStreamReply, error) {
	m := new(ApplyPistageStreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PistageServer is the server API for Pistage service.
// All implementations must embed UnimplementedPistageServer
// for forward compatibility
type PistageServer interface {
	ApplyOneway(context.Context, *ApplyPistageRequest) (*ApplyPistageOnewayReply, error)
	ApplyStream(*ApplyPistageRequest, Pistage_ApplyStreamServer) error
	RollbackOneway(context.Context, *ApplyPistageRequest) (*ApplyRollbackReply, error)
	RollbackStream(*ApplyPistageRequest, Pistage_RollbackStreamServer) error
	mustEmbedUnimplementedPistageServer()
}

// UnimplementedPistageServer must be embedded to have forward compatible implementations.
type UnimplementedPistageServer struct {
}

func (UnimplementedPistageServer) ApplyOneway(context.Context, *ApplyPistageRequest) (*ApplyPistageOnewayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyOneway not implemented")
}
func (UnimplementedPistageServer) ApplyStream(*ApplyPistageRequest, Pistage_ApplyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ApplyStream not implemented")
}
func (UnimplementedPistageServer) RollbackOneway(context.Context, *ApplyPistageRequest) (*ApplyRollbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackOneway not implemented")
}
func (UnimplementedPistageServer) RollbackStream(*ApplyPistageRequest, Pistage_RollbackStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RollbackStream not implemented")
}
func (UnimplementedPistageServer) mustEmbedUnimplementedPistageServer() {}

// UnsafePistageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PistageServer will
// result in compilation errors.
type UnsafePistageServer interface {
	mustEmbedUnimplementedPistageServer()
}

func RegisterPistageServer(s grpc.ServiceRegistrar, srv PistageServer) {
	s.RegisterService(&Pistage_ServiceDesc, srv)
}

func _Pistage_ApplyOneway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyPistageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PistageServer).ApplyOneway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Pistage/ApplyOneway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PistageServer).ApplyOneway(ctx, req.(*ApplyPistageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pistage_ApplyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplyPistageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PistageServer).ApplyStream(m, &pistageApplyStreamServer{stream})
}

type Pistage_ApplyStreamServer interface {
	Send(*ApplyPistageStreamReply) error
	grpc.ServerStream
}

type pistageApplyStreamServer struct {
	grpc.ServerStream
}

func (x *pistageApplyStreamServer) Send(m *ApplyPistageStreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Pistage_RollbackOneway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyPistageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PistageServer).RollbackOneway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Pistage/RollbackOneway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PistageServer).RollbackOneway(ctx, req.(*ApplyPistageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pistage_RollbackStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplyPistageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PistageServer).RollbackStream(m, &pistageRollbackStreamServer{stream})
}

type Pistage_RollbackStreamServer interface {
	Send(*ApplyPistageStreamReply) error
	grpc.ServerStream
}

type pistageRollbackStreamServer struct {
	grpc.ServerStream
}

func (x *pistageRollbackStreamServer) Send(m *ApplyPistageStreamReply) error {
	return x.ServerStream.SendMsg(m)
}

// Pistage_ServiceDesc is the grpc.ServiceDesc for Pistage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pistage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Pistage",
	HandlerType: (*PistageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyOneway",
			Handler:    _Pistage_ApplyOneway_Handler,
		},
		{
			MethodName: "RollbackOneway",
			Handler:    _Pistage_RollbackOneway_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ApplyStream",
			Handler:       _Pistage_ApplyStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RollbackStream",
			Handler:       _Pistage_RollbackStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apiserver/grpc/proto/pistage.proto",
}
